"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetDurationUnitOptions = void 0;
var ecma402_abstract_1 = require("@formatjs/ecma402-abstract");
function GetDurationUnitOptions(unit, options, baseStyle, stylesList, digitalBase, prevStyle) {
    var style = (0, ecma402_abstract_1.GetOption)(options, unit, 'string', stylesList, undefined);
    var displayDefault = 'always';
    if (style === undefined) {
        if (baseStyle === 'digital') {
            if (unit !== 'hours' && unit !== 'minutes' && unit !== 'seconds') {
                displayDefault = 'auto';
            }
            style = digitalBase;
        }
        else {
            displayDefault = 'auto';
            if (prevStyle === 'numeric' || prevStyle === '2-digit') {
                style = 'numeric';
            }
            else {
                style = baseStyle;
            }
        }
    }
    var displayField = "".concat(unit, "Display");
    var display = (0, ecma402_abstract_1.GetOption)(options, displayField, 'string', ['always', 'auto'], displayDefault);
    if (prevStyle === 'numeric' || prevStyle === '2-digit') {
        if (style !== 'numeric' && style !== '2-digit') {
            throw new RangeError("Can't mix numeric and non-numeric styles");
        }
        else if (unit === 'minutes' || unit === 'seconds') {
            style = '2-digit';
        }
        if (style === 'numeric' &&
            display === 'always' &&
            (unit === 'milliseconds' ||
                unit === 'microseconds' ||
                unit === 'nanoseconds')) {
            throw new RangeError("Can't display milliseconds, microseconds, or nanoseconds in numeric format");
        }
    }
    return {
        style: style,
        display: display,
    };
}
exports.GetDurationUnitOptions = GetDurationUnitOptions;
