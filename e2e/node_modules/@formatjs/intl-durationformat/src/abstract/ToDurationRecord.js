"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ToDurationRecord = void 0;
var IsValidDurationRecord_1 = require("./IsValidDurationRecord");
var ToIntegerIfIntegral_1 = require("./ToIntegerIfIntegral");
function ToDurationRecord(input) {
    if (typeof input !== 'object') {
        if (typeof input === 'string') {
            throw new RangeError('Invalid duration format');
        }
        throw new TypeError('Invalid duration');
    }
    var result = {
        years: 0,
        months: 0,
        weeks: 0,
        days: 0,
        hours: 0,
        minutes: 0,
        seconds: 0,
        milliseconds: 0,
        microseconds: 0,
        nanoseconds: 0,
    };
    if (input.days !== undefined) {
        result.days = (0, ToIntegerIfIntegral_1.ToIntegerIfIntegral)(input.days);
    }
    if (input.hours !== undefined) {
        result.hours = (0, ToIntegerIfIntegral_1.ToIntegerIfIntegral)(input.hours);
    }
    if (input.microseconds !== undefined) {
        result.microseconds = (0, ToIntegerIfIntegral_1.ToIntegerIfIntegral)(input.microseconds);
    }
    if (input.milliseconds !== undefined) {
        result.milliseconds = (0, ToIntegerIfIntegral_1.ToIntegerIfIntegral)(input.milliseconds);
    }
    if (input.minutes !== undefined) {
        result.minutes = (0, ToIntegerIfIntegral_1.ToIntegerIfIntegral)(input.minutes);
    }
    if (input.months !== undefined) {
        result.months = (0, ToIntegerIfIntegral_1.ToIntegerIfIntegral)(input.months);
    }
    if (input.nanoseconds !== undefined) {
        result.nanoseconds = (0, ToIntegerIfIntegral_1.ToIntegerIfIntegral)(input.nanoseconds);
    }
    if (input.seconds !== undefined) {
        result.seconds = (0, ToIntegerIfIntegral_1.ToIntegerIfIntegral)(input.seconds);
    }
    if (input.weeks !== undefined) {
        result.weeks = (0, ToIntegerIfIntegral_1.ToIntegerIfIntegral)(input.weeks);
    }
    if (input.years !== undefined) {
        result.years = (0, ToIntegerIfIntegral_1.ToIntegerIfIntegral)(input.years);
    }
    if (input.years === undefined &&
        input.months === undefined &&
        input.weeks === undefined &&
        input.days === undefined &&
        input.hours === undefined &&
        input.minutes === undefined &&
        input.seconds === undefined &&
        input.milliseconds === undefined &&
        input.microseconds === undefined &&
        input.nanoseconds === undefined) {
        throw new TypeError('Invalid duration format');
    }
    if (!(0, IsValidDurationRecord_1.IsValidDurationRecord)(result)) {
        throw new RangeError('Invalid duration format');
    }
    return result;
}
exports.ToDurationRecord = ToDurationRecord;
