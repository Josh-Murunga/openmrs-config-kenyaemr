import { invariant } from '@formatjs/ecma402-abstract';
import { TABLE_2 } from '../constants';
import { DurationFormat } from '../core';
import { getInternalSlots } from '../get_internal_slots';
export function PartitionDurationFormatPattern(df, duration) {
    var result = [];
    var done = false;
    var separated = false;
    var internalSlots = getInternalSlots(df);
    var dataLocale = internalSlots.dataLocale;
    var dataLocaleData = DurationFormat.localeData[dataLocale];
    if (!dataLocaleData) {
        throw new TypeError('Invalid locale');
    }
    var numberingSystem = internalSlots.numberingSystem;
    var separator = dataLocaleData.digitalFormat[numberingSystem];
    var _loop_1 = function (i) {
        var row = TABLE_2[i];
        var value = duration[row.valueField];
        var style = internalSlots[row.styleSlot];
        var display = internalSlots[row.displaySlot];
        var unit = row.unit, numberFormatUnit = row.numberFormatUnit;
        var nfOpts = Object.create(null);
        if (unit === 'seconds' ||
            unit === 'milliseconds' ||
            unit === 'microseconds') {
            var nextStyle = void 0;
            if (unit === 'seconds') {
                nextStyle = internalSlots.milliseconds;
            }
            else if (unit === 'milliseconds') {
                nextStyle = internalSlots.microseconds;
            }
            else {
                nextStyle = internalSlots.nanoseconds;
            }
            if (nextStyle === 'numeric') {
                if (unit === 'seconds') {
                    value +=
                        duration.milliseconds / 1e3 +
                            duration.microseconds / 1e6 +
                            duration.nanoseconds / 1e9;
                }
                else if (unit === 'milliseconds') {
                    value += duration.microseconds / 1e3 + duration.nanoseconds / 1e6;
                }
                else {
                    value += duration.nanoseconds / 1e3;
                }
                if (internalSlots.fractionalDigits === undefined) {
                    nfOpts.maximumFractionDigits = 9;
                    nfOpts.minimumFractionDigits = 0;
                }
                else {
                    nfOpts.maximumFractionDigits = internalSlots.fractionalDigits;
                    nfOpts.minimumFractionDigits = internalSlots.fractionalDigits;
                }
                nfOpts.roundingMode = 'trunc';
                done = true;
            }
        }
        if (value !== 0 || display !== 'auto') {
            nfOpts.numberingSystem = internalSlots.numberingSystem;
            if (style === '2-digit') {
                nfOpts.minimumIntegerDigits = 2;
            }
            if (style !== '2-digit' && style !== 'numeric') {
                nfOpts.style = 'unit';
                nfOpts.unit = numberFormatUnit;
                nfOpts.unitDisplay = style;
            }
            var nf = new Intl.NumberFormat(internalSlots.locale, nfOpts);
            var list_1;
            if (!separated) {
                list_1 = [];
            }
            else {
                list_1 = result[result.length - 1];
                list_1.push({
                    type: 'literal',
                    value: separator,
                });
            }
            var parts = nf.formatToParts(value);
            parts.forEach(function (_a) {
                var type = _a.type, value = _a.value;
                list_1.push({
                    type: type,
                    value: value,
                    unit: numberFormatUnit,
                });
            });
            if (!separated) {
                if (style === '2-digit' || style === 'numeric') {
                    separated = true;
                }
                result.push(list_1);
            }
        }
        else {
            separated = false;
        }
    };
    for (var i = 0; i < TABLE_2.length && !done; i++) {
        _loop_1(i);
    }
    var lfOpts = Object.create(null);
    lfOpts.type = 'unit';
    var listStyle = internalSlots.style;
    if (listStyle === 'digital') {
        listStyle = 'short';
    }
    lfOpts.style = listStyle;
    var lf = new Intl.ListFormat(internalSlots.locale, lfOpts);
    var strings = [];
    for (var _i = 0, result_1 = result; _i < result_1.length; _i++) {
        var parts = result_1[_i];
        var string = '';
        for (var _a = 0, parts_1 = parts; _a < parts_1.length; _a++) {
            var value = parts_1[_a].value;
            string += value;
        }
        strings.push(string);
    }
    var formatted = lf.formatToParts(strings);
    var resultIndex = 0;
    var resultLength = result.length;
    var flattened = [];
    for (var _b = 0, formatted_1 = formatted; _b < formatted_1.length; _b++) {
        var _c = formatted_1[_b], type = _c.type, value = _c.value;
        if (type === 'element') {
            invariant(resultIndex < resultLength, 'Index out of bounds');
            var parts = result[resultIndex];
            for (var _d = 0, parts_2 = parts; _d < parts_2.length; _d++) {
                var part = parts_2[_d];
                flattened.push(part);
            }
            resultIndex++;
        }
        else {
            invariant(type === 'literal', 'Type must be literal');
            flattened.push({
                type: 'literal',
                value: value,
            });
        }
    }
    return flattened;
}
