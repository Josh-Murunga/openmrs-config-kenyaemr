import { CanonicalizeLocaleList, GetNumberOption, GetOption, OrdinaryHasInstance, SupportedLocales, ToObject, invariant, } from '@formatjs/ecma402-abstract';
import { ResolveLocale } from '@formatjs/intl-localematcher';
import { GetDurationUnitOptions } from './abstract/GetDurationUnitOptions';
import { PartitionDurationFormatPattern } from './abstract/PartitionDurationFormatPattern';
import { ToDurationRecord } from './abstract/ToDurationRecord';
import { getInternalSlots } from './get_internal_slots';
import { numberingSystemNames } from './numbering-systems.generated';
import { TIME_SEPARATORS } from './time-separators.generated';
var RESOLVED_OPTIONS_KEYS = [
    'locale',
    'style',
    'years',
    'yearsDisplay',
    'months',
    'monthsDisplay',
    'weeks',
    'weeksDisplay',
    'days',
    'daysDisplay',
    'hours',
    'hoursDisplay',
    'minutes',
    'minutesDisplay',
    'seconds',
    'secondsDisplay',
    'milliseconds',
    'millisecondsDisplay',
    'microseconds',
    'microsecondsDisplay',
    'nanoseconds',
    'nanosecondsDisplay',
    'numberingSystem',
    'fractionalDigits',
];
var TABLE_3 = [
    {
        styleSlot: 'years',
        displaySlot: 'yearsDisplay',
        unit: 'years',
        values: ['long', 'short', 'narrow'],
        digitalDefault: 'short',
    },
    {
        styleSlot: 'months',
        displaySlot: 'monthsDisplay',
        unit: 'months',
        values: ['long', 'short', 'narrow'],
        digitalDefault: 'short',
    },
    {
        styleSlot: 'weeks',
        displaySlot: 'weeksDisplay',
        unit: 'weeks',
        values: ['long', 'short', 'narrow'],
        digitalDefault: 'short',
    },
    {
        styleSlot: 'days',
        displaySlot: 'daysDisplay',
        unit: 'days',
        values: ['long', 'short', 'narrow'],
        digitalDefault: 'short',
    },
    {
        styleSlot: 'hours',
        displaySlot: 'hoursDisplay',
        unit: 'hours',
        values: ['long', 'short', 'narrow', 'numeric', '2-digit'],
        digitalDefault: 'numeric',
    },
    {
        styleSlot: 'minutes',
        displaySlot: 'minutesDisplay',
        unit: 'minutes',
        values: ['long', 'short', 'narrow', 'numeric', '2-digit'],
        digitalDefault: 'numeric',
    },
    {
        styleSlot: 'seconds',
        displaySlot: 'secondsDisplay',
        unit: 'seconds',
        values: ['long', 'short', 'narrow', 'numeric', '2-digit'],
        digitalDefault: 'numeric',
    },
    {
        styleSlot: 'milliseconds',
        displaySlot: 'millisecondsDisplay',
        unit: 'milliseconds',
        values: ['long', 'short', 'narrow', 'numeric'],
        digitalDefault: 'numeric',
    },
    {
        styleSlot: 'microseconds',
        displaySlot: 'microsecondsDisplay',
        unit: 'microseconds',
        values: ['long', 'short', 'narrow', 'numeric'],
        digitalDefault: 'numeric',
    },
    {
        styleSlot: 'nanoseconds',
        displaySlot: 'nanosecondsDisplay',
        unit: 'nanoseconds',
        values: ['long', 'short', 'narrow', 'numeric'],
        digitalDefault: 'numeric',
    },
];
var DurationFormat = /** @class */ (function () {
    function DurationFormat(locales, options) {
        // test262/test/intl402/ListFormat/constructor/constructor/newtarget-undefined.js
        // Cannot use `new.target` bc of IE11 & TS transpiles it to something else
        var newTarget = this && this instanceof DurationFormat ? this.constructor : void 0;
        if (!newTarget) {
            throw new TypeError("Intl.DurationFormat must be called with 'new'");
        }
        var requestedLocales = CanonicalizeLocaleList(locales);
        var opt = Object.create(null);
        var opts = options === undefined ? Object.create(null) : ToObject(options);
        var matcher = GetOption(opts, 'localeMatcher', 'string', ['best fit', 'lookup'], 'best fit');
        var numberingSystem = GetOption(opts, 'numberingSystem', 'string', undefined, undefined);
        if (numberingSystem !== undefined &&
            numberingSystemNames.indexOf(numberingSystem) < 0) {
            // 8.a. If numberingSystem does not match the Unicode Locale Identifier type nonterminal,
            // throw a RangeError exception.
            throw RangeError("Invalid numberingSystems: ".concat(numberingSystem));
        }
        opt.nu = numberingSystem;
        opt.localeMatcher = matcher;
        var localeData = DurationFormat.localeData, availableLocales = DurationFormat.availableLocales;
        var r = ResolveLocale(availableLocales, requestedLocales, opt, 
        // [[RelevantExtensionKeys]] slot, which is a constant
        ['nu'], localeData, DurationFormat.getDefaultLocale);
        var locale = r.locale;
        var internalSlots = getInternalSlots(this);
        internalSlots.initializedDurationFormat = true;
        internalSlots.locale = locale;
        internalSlots.numberingSystem = r.nu;
        var style = GetOption(opts, 'style', 'string', ['long', 'short', 'narrow', 'digital'], 'short');
        internalSlots.style = style;
        internalSlots.dataLocale = r.dataLocale;
        var prevStyle = '';
        TABLE_3.forEach(function (row) {
            var styleSlot = row.styleSlot, displaySlot = row.displaySlot, unit = row.unit, valueList = row.values, digitalBase = row.digitalDefault;
            var unitOptions = GetDurationUnitOptions(unit, opts, style, valueList, digitalBase, prevStyle);
            internalSlots[styleSlot] = unitOptions.style;
            internalSlots[displaySlot] = unitOptions.display;
            if (unit === 'hours' ||
                unit === 'minutes' ||
                unit === 'seconds' ||
                unit === 'milliseconds' ||
                unit === 'microseconds') {
                prevStyle = unitOptions.style;
            }
        });
        internalSlots.fractionalDigits = GetNumberOption(opts, 'fractionalDigits', 0, 9, undefined);
    }
    DurationFormat.prototype.resolvedOptions = function () {
        if (typeof this !== 'object' ||
            !OrdinaryHasInstance(DurationFormat, this)) {
            throw TypeError('Method Intl.DurationFormat.prototype.resolvedOptions called on incompatible receiver');
        }
        var internalSlots = getInternalSlots(this);
        var ro = {};
        for (var _i = 0, RESOLVED_OPTIONS_KEYS_1 = RESOLVED_OPTIONS_KEYS; _i < RESOLVED_OPTIONS_KEYS_1.length; _i++) {
            var key = RESOLVED_OPTIONS_KEYS_1[_i];
            var v = internalSlots[key];
            if (key === 'fractionalDigits') {
                if (v !== undefined) {
                    v = Number(v);
                }
            }
            else {
                invariant(v !== undefined, "Missing internal slot ".concat(key));
            }
            ro[key] = v;
        }
        return ro;
    };
    DurationFormat.prototype.formatToParts = function (duration) {
        var df = this;
        var locInternalSlots = getInternalSlots(this);
        if (locInternalSlots.initializedDurationFormat === undefined) {
            throw new TypeError('Error uninitialized locale');
        }
        var record = ToDurationRecord(duration);
        var parts = PartitionDurationFormatPattern(df, record);
        var result = [];
        for (var _i = 0, parts_1 = parts; _i < parts_1.length; _i++) {
            var _a = parts_1[_i], type = _a.type, unit = _a.unit, value = _a.value;
            var obj = { type: type, value: value };
            if (unit) {
                obj.unit = unit;
            }
            result.push(obj);
        }
        return result;
    };
    DurationFormat.prototype.format = function (duration) {
        var df = this;
        var locInternalSlots = getInternalSlots(this);
        if (locInternalSlots.initializedDurationFormat === undefined) {
            throw new TypeError('Error uninitialized locale');
        }
        var record = ToDurationRecord(duration);
        var parts = PartitionDurationFormatPattern(df, record);
        var result = '';
        for (var _i = 0, parts_2 = parts; _i < parts_2.length; _i++) {
            var value = parts_2[_i].value;
            result += value;
        }
        return result;
    };
    DurationFormat.supportedLocalesOf = function (locales, options) {
        return SupportedLocales(DurationFormat.availableLocales, CanonicalizeLocaleList(locales), options);
    };
    DurationFormat.__defaultLocale = 'en';
    DurationFormat.availableLocales = new Set();
    DurationFormat.localeData = Object.keys(TIME_SEPARATORS.localeData).reduce(function (all, locale) {
        DurationFormat.availableLocales.add(locale);
        var nu = TIME_SEPARATORS.localeData[locale].nu;
        all[locale] = {
            nu: nu,
            digitalFormat: TIME_SEPARATORS.localeData[locale].separator ||
                nu.reduce(function (separators, n) {
                    separators[n] = TIME_SEPARATORS.default;
                    return separators;
                }, {}),
        };
        return all;
    }, {});
    DurationFormat.getDefaultLocale = function () {
        return DurationFormat.__defaultLocale;
    };
    DurationFormat.polyfilled = true;
    return DurationFormat;
}());
export { DurationFormat };
