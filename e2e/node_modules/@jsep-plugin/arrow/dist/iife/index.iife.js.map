{"version":3,"file":"index.iife.js","sources":["../../src/index.js"],"sourcesContent":["const ARROW_EXP = 'ArrowFunctionExpression';\n\nexport default {\n\tname: 'arrow',\n\n\tinit(jsep) {\n\t\t// arrow-function expressions: () => x, v => v, (a, b) => v\n\t\tjsep.addBinaryOp('=>', 0.1, true);\n\n\t\t// this hook searches for the special case () => ...\n\t\t// which would normally throw an error because of the invalid LHS to the bin op\n\t\tjsep.hooks.add('gobble-expression', function gobbleEmptyArrowArg(env) {\n\t\t\tthis.gobbleSpaces();\n\t\t\tif (this.code === jsep.OPAREN_CODE) {\n\t\t\t\tconst backupIndex = this.index;\n\t\t\t\tthis.index++;\n\n\t\t\t\tthis.gobbleSpaces();\n\t\t\t\tif (this.code === jsep.CPAREN_CODE) {\n\t\t\t\t\tthis.index++;\n\n\t\t\t\t\tconst biop = this.gobbleBinaryOp();\n\t\t\t\t\tif (biop === '=>') {\n\t\t\t\t\t\t// () => ...\n\t\t\t\t\t\tconst body = this.gobbleBinaryExpression();\n\t\t\t\t\t\tif (!body) {\n\t\t\t\t\t\t\tthis.throwError(\"Expected expression after \" + biop);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tenv.node = {\n\t\t\t\t\t\t\ttype: ARROW_EXP,\n\t\t\t\t\t\t\tparams: null,\n\t\t\t\t\t\t\tbody,\n\t\t\t\t\t\t};\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthis.index = backupIndex;\n\t\t\t}\n\t\t});\n\n\t\tjsep.hooks.add('after-expression', function fixBinaryArrow(env) {\n\t\t\tupdateBinariesToArrows(env.node);\n\t\t});\n\n\t\tfunction updateBinariesToArrows(node) {\n\t\t\tif (node) {\n\t\t\t\t// Traverse full tree, converting any sub-object nodes as needed\n\t\t\t\tObject.values(node).forEach((val) => {\n\t\t\t\t\tif (val && typeof val === 'object') {\n\t\t\t\t\t\tupdateBinariesToArrows(val);\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tif (node.operator === '=>') {\n\t\t\t\t\tnode.type = ARROW_EXP;\n\t\t\t\t\tnode.params = node.left ? [node.left] : null;\n\t\t\t\t\tnode.body = node.right;\n\t\t\t\t\tif (node.params && node.params[0].type === jsep.SEQUENCE_EXP) {\n\t\t\t\t\t\tnode.params = node.params[0].expressions;\n\t\t\t\t\t}\n\t\t\t\t\tdelete node.left;\n\t\t\t\t\tdelete node.right;\n\t\t\t\t\tdelete node.operator;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n"],"names":[],"mappings":"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"}