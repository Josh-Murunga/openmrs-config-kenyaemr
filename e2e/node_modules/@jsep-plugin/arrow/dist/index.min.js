var e={name:"arrow",init(e){function o(t){t&&(Object.values(t).forEach((e=>{e&&"object"==typeof e&&o(e)})),"=>"===t.operator&&(t.type="ArrowFunctionExpression",t.params=t.left?[t.left]:null,t.body=t.right,t.params&&t.params[0].type===e.SEQUENCE_EXP&&(t.params=t.params[0].expressions),delete t.left,delete t.right,delete t.operator))}e.addBinaryOp("=>",.1,!0),e.hooks.add("gobble-expression",(function(o){if(this.gobbleSpaces(),this.code===e.OPAREN_CODE){const t=this.index;if(this.index++,this.gobbleSpaces(),this.code===e.CPAREN_CODE){this.index++;const e=this.gobbleBinaryOp();if("=>"===e){const t=this.gobbleBinaryExpression();return t||this.throwError("Expected expression after "+e),void(o.node={type:"ArrowFunctionExpression",params:null,body:t})}}this.index=t}})),e.hooks.add("after-expression",(function(e){o(e.node)}))}};export{e as default};
//# sourceMappingURL=index.min.js.map
